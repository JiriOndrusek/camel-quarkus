/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.quarkus.component.snmp.it;

import java.util.Deque;
import java.util.Map;
import java.util.stream.Collectors;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.apache.camel.CamelContext;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.component.snmp.SnmpMessage;
import org.jboss.logging.Logger;
import org.snmp4j.PDU;
import org.snmp4j.PDUv1;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.TimeTicks;
import org.snmp4j.smi.Variable;
import org.snmp4j.smi.VariableBinding;

@Path("/snmp")
@ApplicationScoped
public class SnmpResource {

    private static final Logger LOG = Logger.getLogger(SnmpResource.class);

    private static final String COMPONENT_SNMP = "snmp";

    @Inject
    @Named("snmpTrapResults")
    Map<String, Deque<SnmpMessage>> snmpResults;

    @Inject
    ProducerTemplate producerTemplate;

    @Inject
    CamelContext context;

    @Path("/load/component/snmp")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response loadComponentSnmp() throws Exception {
        /* This is an autogenerated test */
        if (context.getComponent(COMPONENT_SNMP) != null) {
            return Response.ok().build();
        }
        LOG.warnf("Could not load [%s] from the Camel context", COMPONENT_SNMP);
        return Response.status(500, COMPONENT_SNMP + " could not be loaded from the Camel context").build();
    }

    @Path("/sendPDU")
    @POST
    @Produces(MediaType.TEXT_PLAIN)
    public Response sendPDU(String payload) {
        String pdu = producerTemplate.requestBody("direct:producePDU", "", String.class);

        return Response.ok().build();
    }

    @Path("/sendTrap")
    @POST
    @Produces(MediaType.TEXT_PLAIN)
    public Response sendTrap(@QueryParam("version") String version, String payload) throws Exception {
        PDU trap = createTrap(payload);

        producerTemplate.sendBody("direct:snmpTrap" + version, trap);

        return Response.ok().build();
    }

    @Path("/results")
    @POST
    @Produces(MediaType.TEXT_PLAIN)
    public Response results(String from) throws Exception {
        OID oid = new OID("1.2.3.4.5");
        String result = snmpResults.get(from).stream().map(m -> m.getSnmpMessage().getVariable(oid).toString())
                .collect(Collectors.joining(","));

        return Response.ok(result).build();
    }

    public PDU createTrap(String payload) {
        PDUv1 trap = new PDUv1();
        trap.setGenericTrap(PDUv1.ENTERPRISE_SPECIFIC);
        trap.setSpecificTrap(1);

        OID oid = new OID("1.2.3.4.5");
        trap.add(new VariableBinding(SnmpConstants.snmpTrapOID, oid));
        trap.add(new VariableBinding(SnmpConstants.sysUpTime, new TimeTicks(5000))); // put your uptime here
        trap.add(new VariableBinding(SnmpConstants.sysDescr, new OctetString("System Description")));
        trap.setEnterprise(oid);

        //Add Payload
        Variable var = new OctetString(payload);
        trap.add(new VariableBinding(oid, var));
        return trap;
    }
}
