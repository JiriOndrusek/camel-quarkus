/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.quarkus.component.splunk.hec.it;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.apache.camel.CamelContext;
import org.apache.camel.ProducerTemplate;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.jboss.logging.Logger;

@Path("/splunk-hec")
@ApplicationScoped
public class SplunkHecResource {
    public static final String PARAM_REMOTE_HOST = "org.apache.camel.quarkus.component.splunk.hec.it.SplunkHecResource_host";
    public static final String PARAM_HEC_PORT = "org.apache.camel.quarkus.component.splunk.hec.it.SplunkHecResource_hecPort";
    public static final String PARAM_HEC_TOKEN = "org.apache.camel.quarkus.component.splunk.hec.it.SplunkHecResource_hecToken";
    public static final String PARAM_REMOTE_PORT = "org.apache.camel.quarkus.component.splunk.hec.it.SplunkHecResource_remotePort";

    private static final Logger LOG = Logger.getLogger(SplunkHecResource.class);

    private static final String COMPONENT_SPLUNK_HEC = "splunk-hec";

    @Inject
    CamelContext context;

    @Inject
    ProducerTemplate producer;

    @ConfigProperty(name = PARAM_REMOTE_PORT)
    Integer remotePort;
    //    Integer remotePort = 32769;

    @ConfigProperty(name = PARAM_HEC_PORT)
    Integer hecPort;
//    Integer hecPort = 8088;
    //        Integer hecPort = 32770;

    @ConfigProperty(name = PARAM_REMOTE_HOST)
    String host;
//            String host = "localhost";

    @ConfigProperty(name = PARAM_HEC_TOKEN)
    String token;
//            String token = "4b35e71f-6a0f-4bab-94ce-f591ff45eecd";

    @Path("/load/component/splunk-hec")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response loadComponentSplunkHec() throws Exception {
        /* This is an autogenerated test */
        if (context.getComponent(COMPONENT_SPLUNK_HEC) != null) {
            return Response.ok().build();
        }
        LOG.warnf("Could not load [%s] from the Camel context", COMPONENT_SPLUNK_HEC);
        return Response.status(500, COMPONENT_SPLUNK_HEC + " could not be loaded from the Camel context").build();
    }

    @Path("/send")
    @POST
    @Produces(MediaType.TEXT_PLAIN)
    public String send(String data) throws Exception {
        System.out.println("**************** sending");
        String url = String.format("splunk-hec:%s:%s/%s?skipTlsVerify=true&index=testindex", host, hecPort, token);
        String ret = producer.requestBody(url, data, String.class);
        System.out.println("****************" + ret);
        return ret;
    }
}
