/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.quarkus.component.jt400.it;

import com.ibm.as400.access.DataStream;
import com.ibm.as400.access.MockAS400ImplRemote;
import com.ibm.as400.access.MockedResponses;
import com.ibm.as400.access.OkReply;
import com.ibm.as400.access.RequestReply;
import com.ibm.as400.access.NormalReply;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.FormParam;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.apache.camel.CamelContext;
import org.apache.camel.ConsumerTemplate;
import org.apache.camel.Exchange;
import org.jboss.logging.Logger;

import java.nio.charset.StandardCharsets;

@Path("/jt400")
@ApplicationScoped
public class Jt400Resource {

    public enum ReplyType {normal, ok, request}

    private static final Logger LOG = Logger.getLogger(Jt400Resource.class);

    private static final String COMPONENT_JT400 = "jt400";

    @Inject
    CamelContext context;

    @Inject
    ConsumerTemplate consumerTemplate;

    @Inject
    MockAS400ImplRemote as400ImplRemote;

    @Path("/load/component/jt400")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response loadComponentJt400() throws Exception {
        /* This is an autogenerated test */
        if (context.getComponent(COMPONENT_JT400) != null) {
            return Response.ok().build();
        }
        LOG.warnf("Could not load [%s] from the Camel context", COMPONENT_JT400);
        return Response.status(500, COMPONENT_JT400 + " could not be loaded from the Camel context").build();
    }

    @Path("/put/mockResponse")
    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.TEXT_PLAIN)
    public Response putMockResponse(ReplyType replyType) throws Exception {
        DataStream dataStream = switch (replyType) {
            case normal -> new NormalReply();
            case ok -> new OkReply();
            case request -> new RequestReply();
        };

        MockedResponses.add(dataStream);

        return Response.ok().build();
    }

    @Path("/get/data/")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response getData() throws Exception {

//        as400ImplRemote.addResponse(new OkReply());
//        as400ImplRemote.addResponse(new RequestReply());
//        as400ImplRemote.addResponse(new OkReply());
//        as400ImplRemote.addResponse(new NormalReply());

        Exchange ex = consumerTemplate.receive(
                "jt400://username:password@system/qsys.lib/MSGOUTDQ.DTAQ?connectionPool=#mockPool&keyed=true&format=binary&searchKey=MYKEY&searchType=GE");

        return Response.ok().entity(ex.getIn().getBody(String.class)).build();

    }
}
